/* Copyright (c) 2010 gskinner.com, inc.
*  CreateGWT (c) 2012 sinewavemultimedia.com
* 
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use,
* copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following
* conditions:
* 
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*/


package com.sinewavemultimedia.easeljs.framework.js.events;

import com.google.gwt.core.client.JavaScriptObject;
import com.sinewavemultimedia.easeljs.framework.js.CallBackEvent;
import com.sinewavemultimedia.easeljs.framework.js.display.DisplayObject;
import com.sinewavemultimedia.easeljs.framework.js.filters.AlphaMapFilter;

/*A class the represents MouseEvent.js
* author: James Tyner 
*/
public class MouseEvent extends JavaScriptObject {

	protected MouseEvent(){}

	/**
	 * The display object this event relates to.
	 * @property target
	 * @type DisplayObject
	 * @default null
	*/	
	public native final void setTarget(DisplayObject target)/*-{
		this.target=target;
	}-*/;
	
	public native final DisplayObject getTarget()/*-{
		return this.target;
	}-*/;
	
	/**
	 * The type of mouse event. This will be the same as the handler it maps to (onPress,
	 * onMouseDown, onMouseUp, onMouseMove, or onClick).
	 * @property type
	 * @type String
	 **/	
	public native final void setType(String type)/*-{
		this.type=type;
	}-*/;
	
	public native final String getType()/*-{
		return this.type;
	}-*/;
	
	/**
	 * The native MouseEvent generated by the browser. The properties and API for this
	 * event may differ between browsers. This property will be null if the
	 * EaselJS property was not directly generated from a native MouseEvent.
	 * @property nativeEvent
	 * @type MouseEvent
	 * @default null
	 **/	
	public native final void nativeEvent(CallBackEvent backEvent)/*-{
		this.nativeEvent=function(event){
			callBack.@com.sinewavemultimedia.easeljs.framework.js.CallBackEvent::onSuccess(Lcom/sinewavemultimedia/easeljs/framework/js/Event;)(event);
		};	
	}-*/;
	
	/**
	 * For events of type "onPress" only you can assign a handler to the onMouseMove
	 * property. This handler will be called every time the mouse is moved until the mouse is released.
	 * This is useful for operations such as drag and drop.
	 * @event onMouseMove
	 * @param {MouseEvent} event A MouseEvent instance with information about the current mouse event.
	 **/	
	public native final void onMouseMove(CallBackEvent backEvent)/*-{
		this.onMouseMove=function(event){
			callBack.@com.sinewavemultimedia.easeljs.framework.js.CallBackEvent::onSuccess(Lcom/sinewavemultimedia/easeljs/framework/js/Event;)(event);
		};	
	}-*/;
	
	
	/**
	 * For events of type "onPress" only you can assign a handler to the onMouseUp
	 * property. This handler will be called every time the mouse is moved until the mouse is released.
	 * This is useful for operations such as drag and drop.
	 * @event onMouseUp
	 * @param {MouseEvent} event A MouseEvent instance with information about the current mouse event.
	*/	
	public native final void onMouseUp(CallBackEvent backEvent)/*-{
		this.onMouseUp=function(event){
			callBack.@com.sinewavemultimedia.easeljs.framework.js.CallBackEvent::onSuccess(Lcom/sinewavemultimedia/easeljs/framework/js/Event;)(event);
		};	
	}-*/;
	
	
	/**
	 * The normalized x position on the stage. This will always be within the range 0 to stage width.
	 * @property stageX
	 * @type Number
	*/
	public native final void setStageX(double stageX)/*-{
		this.stageX=stageX;
	}-*/;
	
	public native final double getStageX()/*-{
		return this.stageX;
	}-*/;
	
	/**
	 * The normalized y position on the stage. This will always be within the range 0 to stage height.
	 * @property stageY
	 * @type Number
	 **/	
	public native final double getStageY()/*-{
		return this.stageY;
	}-*/;	

	public native final void setStageY(double stageY)/*-{
		this.stageY=stageY;
	}-*/;

	/**
	 * The raw x position relative to the stage. Normally this will be the same as the stageX value, unless
	 * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
	 * @property rawX
	 * @type Number
	*/	
	public native final double getRawX()/*-{
		return this.rawX;
	}-*/;	
	
	public native final void setRawX(double rawX)/*-{
		this.rawX=rawX;
	}-*/;		
	
	/**
	 * The raw y position relative to the stage. Normally this will be the same as the stageY value, unless
	 * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
	 * @property rawY
	 * @type Number
	*/	
	public native final double getRawY()/*-{
		return this.rawY;
	}-*/;
	
	public native final void setRawY(double rawY)/*-{
		this.rawY=rawY;
	}-*/;	
	
	/**
	* This is passed as the parameter to onPress, onMouseMove, onMouseUp, onMouseDown, onMouseOver, onMouseOut and onClick
	* handlers on DisplayObject instances.
	* @class MouseEvent
	* @constructor
	* @param {String} type The event type.
	* @param {Number} stageX The normalized x position relative to the stage.
	* @param {Number} stageY The normalized y position relative to the stage.
	* @param {DisplayObject} target The display object this event relates to.
	* @param {MouseEvent} nativeEvent The native DOM event related to this mouse event.
	 * @param {Number} pointerID The unique id for the pointer.
	 * @param {Boolean} primary Indicates whether this is the primary pointer in a multitouch environment.
	 * @param {Number} rawX The raw x position relative to the stage.
	 * @param {Number} rawY The raw y position relative to the stage.
	**/	
	public native static MouseEvent create(String type,int stageX,int stageY,DisplayObject target,MouseEvent nativeEvent,int pointerID,boolean primary,int rawX,int rawY) /*-{
		return new $wnd.createjs.MouseEvent(type, stageX, stageY, target, nativeEvent, pointerID, primary, rawX, rawY);
	}-*/;
	
	/**
	 * The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system
	 * supplied id value.
	 * @property pointerID
	 * @type {Number}
	 */	
	public native final void setPointerID(double pointerID)/*-{
		this.pointerID=pointerID;
	}-*/;		
	
	public native final double getPointerID()/*-{
		return this.pointerID;
	}-*/;
	
	/**
	 * Indicates whether this is the primary pointer in a multitouch environment. This will always be true for the mouse.
	 * For touch pointers, the first pointer in the current stack will be considered the primary pointer.
	 * @property primaryPointer
	 * @type {Boolean}
	 */	
	public native final void setPrimary(boolean primary)/*-{
		this.primary=primary;
	}-*/;		
	
	public native final boolean getPrimary()/*-{
		return this.primary;
	}-*/;	
	
	public native MouseEvent clone() /*-{
		return this.clone();
	}-*/;	
}
